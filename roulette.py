{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b93c7364-0e69-418d-9364-020603d76bf2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def spin_roulette():\n",
    "    return random.randint(0, 36)  # Generating a random number from 0 to 36 representing the roulette wheel\n",
    "\n",
    "def calculate_winnings(result, bets):\n",
    "    winnings = 0\n",
    "    for bet in bets:\n",
    "        if bet[0] == 'red':\n",
    "            if result in red_numbers:\n",
    "                winnings += bet[1] * 2  # Double the bet for a red win\n",
    "        elif bet[0] == 'black':\n",
    "            if result in black_numbers:\n",
    "                winnings += bet[1] * 2  # Double the bet for a black win\n",
    "        elif bet[0] == 'odd':\n",
    "            if result % 2 != 0 and result != 0:\n",
    "                winnings += bet[1] * 2  # Double the bet for an odd win\n",
    "        elif bet[0] == 'even':\n",
    "            if result % 2 == 0 and result != 0:\n",
    "                winnings += bet[1] * 2  # Double the bet for an even win\n",
    "        elif bet[0] == 'number':\n",
    "            if result == bet[1]:\n",
    "                winnings += bet[2] * 36  # 35:1 payout for winning on a single number\n",
    "        elif bet[0] == 'column':\n",
    "            if result in bet[1]:\n",
    "                winnings += bet[2] * 3  # 2:1 payout for winning on a column\n",
    "        elif bet[0] == 'dozen':\n",
    "            if result in bet[1]:\n",
    "                winnings += bet[2] * 3  # 2:1 payout for winning on a dozen\n",
    "    return winnings\n",
    "\n",
    "# Define red and black numbers\n",
    "red_numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]\n",
    "black_numbers = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]\n",
    "\n",
    "# Main function to run the simulation\n",
    "def main():\n",
    "    balance = 5000\n",
    "    total_bet = 0\n",
    "    \n",
    "    # Example bets\n",
    "    bets = []\n",
    "    \n",
    "    red_bet = input(\"Do you want to bet on red? (Enter amount or 'e' to skip): \")\n",
    "    if red_bet.lower() != 'e':\n",
    "        bets.append(('red', float(red_bet)))\n",
    "    \n",
    "    black_bet = input(\"Do you want to bet on black? (Enter amount or 'e' to skip): \")\n",
    "    if black_bet.lower() != 'e':\n",
    "        bets.append(('black', float(black_bet)))\n",
    "    \n",
    "    odd_bet = input(\"Do you want to bet on odd? (Enter amount or 'e' to skip): \")\n",
    "    if odd_bet.lower() != 'e':\n",
    "        bets.append(('odd', float(odd_bet)))\n",
    "    \n",
    "    even_bet = input(\"Do you want to bet on even? (Enter amount or 'e' to skip): \")\n",
    "    if even_bet.lower() != 'e':\n",
    "        bets.append(('even', float(even_bet)))\n",
    "    \n",
    "    column_bet = input(\"Do you want to bet on a column? (Enter column number(s) separated by commas or 'e' to skip): \")\n",
    "    if column_bet.lower() != 'e':\n",
    "        columns = [int(col) for col in column_bet.split(\",\")]\n",
    "        column_bet_amount = float(input(\"Enter the bet amount for column(s): \"))\n",
    "        bets.append(('column', columns, column_bet_amount))\n",
    "    \n",
    "    dozen_bet = input(\"Do you want to bet on a dozen? (Enter dozen number(s) separated by commas or 'e' to skip): \")\n",
    "    if dozen_bet.lower() != 'e':\n",
    "        dozens = [int(doz) for doz in dozen_bet.split(\",\")]\n",
    "        dozen_bet_amount = float(input(\"Enter the bet amount for dozen(s): \"))\n",
    "        bets.append(('dozen', dozens, dozen_bet_amount))\n",
    "    \n",
    "    number_bet = input(\"Do you want to bet on a specific number? (Enter number and amount separated by comma or 'e' to skip): \")\n",
    "    if number_bet.lower() != 'e':\n",
    "        number, amount = map(float, number_bet.split(','))\n",
    "        bets.append(('number', int(number), amount))\n",
    "    \n",
    "    for bet in bets:\n",
    "        if isinstance(bet[1], list):\n",
    "            total_bet += bet[2]  # Add the bet amount for column and dozen bets\n",
    "        else:\n",
    "            total_bet += bet[1]  # Add the bet amount for other types of bets\n",
    "    \n",
    "    result = spin_roulette()\n",
    "    print(\"The roulette landed on:\", result)\n",
    "    \n",
    "    winnings = calculate_winnings(result, bets)\n",
    "    balance += winnings - total_bet\n",
    "    \n",
    "    print(\"Total bet:\", total_bet)\n",
    "    print(\"Total winnings:\", winnings)\n",
    "    print(\"Balance:\", balance)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
